"""me when bytes not string :(

Revision ID: a3f495f1e0d6
Revises: a03332164c25
Create Date: 2023-10-20 10:31:48.486634

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'a3f495f1e0d6'
down_revision = 'a03332164c25'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    for index in range(10):
       op.exec(f"ALTER TABLE gsuser ALTER COLUMN pokemon{index} TYPE BYTEA USING pokemon{index}::bytea")
    #with op.batch_alter_table('gsuser', schema=None) as batch_op:
    #    batch_op.alter_column('pokemon0',
    #           existing_type=sa.VARCHAR(),
    #           type_=sa.LargeBinary(),
    #           existing_nullable=True)
    #    batch_op.alter_column('pokemon1',
    #           existing_type=sa.VARCHAR(),
    #           type_=sa.LargeBinary(),
    #           existing_nullable=True)
    #    batch_op.alter_column('pokemon2',
    #           existing_type=sa.VARCHAR(),
    #           type_=sa.LargeBinary(),
    #           existing_nullable=True)
    #    batch_op.alter_column('pokemon3',
    #           existing_type=sa.VARCHAR(),
    #           type_=sa.LargeBinary(),
    #           existing_nullable=True)
    #    batch_op.alter_column('pokemon4',
    #           existing_type=sa.VARCHAR(),
    #           type_=sa.LargeBinary(),
    #           existing_nullable=True)
    #    batch_op.alter_column('pokemon5',
    #           existing_type=sa.VARCHAR(),
    #           type_=sa.LargeBinary(),
    #           existing_nullable=True)
    #    batch_op.alter_column('pokemon6',
    #           existing_type=sa.VARCHAR(),
    #           type_=sa.LargeBinary(),
    #           existing_nullable=True)
    #    batch_op.alter_column('pokemon7',
    #           existing_type=sa.VARCHAR(),
    #           type_=sa.LargeBinary(),
    #           existing_nullable=True)
    #    batch_op.alter_column('pokemon8',
    #           existing_type=sa.VARCHAR(),
    #           type_=sa.LargeBinary(),
    #           existing_nullable=True)
    #    batch_op.alter_column('pokemon9',
    #           existing_type=sa.VARCHAR(),
    #           type_=sa.LargeBinary(),
    #           existing_nullable=True)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('gsuser', schema=None) as batch_op:
        batch_op.alter_column('pokemon9',
               existing_type=sa.LargeBinary(),
               type_=sa.VARCHAR(),
               existing_nullable=True)
        batch_op.alter_column('pokemon8',
               existing_type=sa.LargeBinary(),
               type_=sa.VARCHAR(),
               existing_nullable=True)
        batch_op.alter_column('pokemon7',
               existing_type=sa.LargeBinary(),
               type_=sa.VARCHAR(),
               existing_nullable=True)
        batch_op.alter_column('pokemon6',
               existing_type=sa.LargeBinary(),
               type_=sa.VARCHAR(),
               existing_nullable=True)
        batch_op.alter_column('pokemon5',
               existing_type=sa.LargeBinary(),
               type_=sa.VARCHAR(),
               existing_nullable=True)
        batch_op.alter_column('pokemon4',
               existing_type=sa.LargeBinary(),
               type_=sa.VARCHAR(),
               existing_nullable=True)
        batch_op.alter_column('pokemon3',
               existing_type=sa.LargeBinary(),
               type_=sa.VARCHAR(),
               existing_nullable=True)
        batch_op.alter_column('pokemon2',
               existing_type=sa.LargeBinary(),
               type_=sa.VARCHAR(),
               existing_nullable=True)
        batch_op.alter_column('pokemon1',
               existing_type=sa.LargeBinary(),
               type_=sa.VARCHAR(),
               existing_nullable=True)
        batch_op.alter_column('pokemon0',
               existing_type=sa.LargeBinary(),
               type_=sa.VARCHAR(),
               existing_nullable=True)

    # ### end Alembic commands ###
